#!/usr/bin/python

""" 
    Copyright 2007 Alaa Salman <alaa@codedemigod.com>
    
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

"""

import pygtk
pygtk.require('2.0')

import gtk
import gnomeapplet
import sys
import os
import pynotify
import gobject

ICON_PATH = "/usr/share/bombmaker/icons"



def on_Bomb1(event, data = None):
    timer_Activate(60000, "KABOOM", "Your 1 min bomb just exploded.")
    
def on_Bomb3(event, data = None):
    timer_Activate(180000, "KABOOOOM", "Your 3 min bomb just exploded.")
    
def on_Bomb5(event, data = None):
    timer_Activate(300000, "KABOOOOOM", "Your 5 min bomb just exploded.")
    
def on_Timer_Set(event, data = None):
    
    dialog = gtk.Dialog("Custom Time Bomb", None, gtk.DIALOG_MODAL)
    
    ok_button = dialog.add_button(gtk.STOCK_OK, gtk.RESPONSE_ACCEPT)
    cancel_button = dialog.add_button(gtk.STOCK_CANCEL, gtk.RESPONSE_REJECT)
    
    
    minutesLabel = gtk.Label("Minutes")
    minutesSpin = gtk.SpinButton()
    minutesSpin.set_numeric(True)
    minutesSpin.set_range(0, 1440) #max range is 1 day
    minutesSpin.set_wrap(False)
    minutesSpin.set_increments(1, 1)
    
    secondsLabel = gtk.Label("Seconds")
    secondsSpin = gtk.SpinButton()
    secondsSpin.set_range(0, 60)
    secondsSpin.set_numeric(True)
    secondsSpin.set_wrap(True)
    secondsSpin.set_increments(1, 1)
        
    
    extraMessageTextView = gtk.TextView()
    extraMessageScrolledWindow = gtk.ScrolledWindow()
    extraMessageLabel = gtk.Label("Optional Message")
    
    extraMessageScrolledWindow.add(extraMessageTextView)
    
    extraMessageScrolledWindow.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    extraMessageScrolledWindow.set_shadow_type(gtk.SHADOW_ETCHED_IN)
    
    minutesSpin.connect_object("activate", gtk.Button.clicked, ok_button)
    secondsSpin.connect_object("activate", gtk.Button.clicked, ok_button)
    
    #add to layout
    extraMessageVBox = gtk.VBox(False, 8)    
    
    extraMessageVBox.add(extraMessageLabel)
    extraMessageVBox.add(extraMessageScrolledWindow)
    
           
    timeHBox = gtk.HBox(False, 8)
    
    timeHBox.add(minutesLabel)
    timeHBox.add(minutesSpin)
    timeHBox.add(secondsLabel)
    timeHBox.add(secondsSpin)    
    
        
    dialog.vbox.set_spacing(5) 
    dialog.set_border_width(10)       
    dialog.vbox.add(timeHBox)
    dialog.vbox.add(gtk.HSeparator())    
    dialog.vbox.add(extraMessageVBox)
    
    
    dialog.set_icon_from_file(ICON_PATH + "/icon.png")    
    dialog.show_all()
    
    if(dialog.run() == gtk.RESPONSE_ACCEPT):
                        
        try:
            
            intEnteredSeconds = secondsSpin.get_value_as_int()
            intEnteredMinutes = minutesSpin.get_value_as_int()
            
            
            #extra text buffer from textview
            textBuffer = extraMessageTextView.get_buffer()
            startIter = textBuffer.get_start_iter()
            endIter = textBuffer.get_end_iter()
            
            #extract text from text buffer
            extraMessage = textBuffer.get_text(startIter, endIter, False)
            
            notificationMessage = ""
            
            if(intEnteredMinutes > 0):
                notificationMessage = "Your %s minute, %s second bomb just exploded." % (intEnteredMinutes, intEnteredSeconds)
            else:
                notificationMessage = "Your %s second bomb just exploded." % intEnteredSeconds
            
            #check if user added an extra message
            if(len(extraMessage) > 0):
                notificationMessage += "\nExtra Message:\n%s" % extraMessage
            
            timer_Activate(((intEnteredMinutes*60) + intEnteredSeconds)*1000, "KABOOM", notificationMessage)
            
        except ValueError:
            pass
      
    else:
        print "cancel"
        
    dialog.destroy()    
    
def on_About_Press(event, data = None):
    about = gtk.AboutDialog()
    about.set_name("Bomb Maker Applet")
    about.set_version("0.1")
    about.set_website("http://www.codedemigod.com")
    about.set_authors(["Alaa Salman <alaa@codedemigod.com>", "Icons from FriendlyFire collection by sniffels@devianART"])
    about.set_copyright("Copyright 2007")
    about.set_license("GNU General Public License v.3")
    about.set_logo(gtk.gdk.pixbuf_new_from_file(ICON_PATH + "/icon.png"))
    about.set_icon_from_file(ICON_PATH + "/icon.png")
    if(about.run() == gtk.RESPONSE_CANCEL):
        about.destroy()
    
    
def on_Timer_Expire(timerTitle, timerMessage):
    pynotify.init("Bomb Maker Applet")
    notification = pynotify.Notification(timerTitle, timerMessage, ICON_PATH + "/kaboombomb.png")
    notification.set_urgency(pynotify.URGENCY_LOW)
    notification.show()
    

def timer_Activate(timeTillExpiration = 3000, timerTitle = "Bomb Applet", timerMessage = "KABOOOM"):
    gobject.timeout_add(timeTillExpiration, on_Timer_Expire, timerTitle, timerMessage)
    
            
def sample_factory(applet, iid):
        
    image = gtk.Image()
    image.set_from_file(ICON_PATH + "/panelicon.png")
    
    ppmenu_xml = """
        <popup name="button3">
           
            <submenu name="BombsMenu" label="Bombs" pixtype="filename" pixname="/usr/share/bombmaker/icons/bombsicon.png">
                <menuitem name="m1" verb="Bomb1" label="Baby Bomb(1min)" pixtype="filename" pixname="/usr/share/bombmaker/icons/babybomb.png"/>
                <menuitem name="m1" verb="Bomb3" label="Regular Bomb(3min)" pixtype="filename" pixname="/usr/share/bombmaker/icons/regularbomb.png"/>
                <menuitem name="m1" verb="Bomb5" label="Big Bomb(5min)" pixtype="filename" pixname="/usr/share/bombmaker/icons/bigbomb.png"/>
                <menuitem name="m2" verb="SetTimer" label="Custom Bomb(custom)" pixtype="filename" pixname="/usr/share/bombmaker/icons/custombomb.png"/>
            </submenu>
         
            <menuitem name="About Item" verb="About" stockid="gtk-about"/>
        </popup>        
        """
    ppmenu_verbs = [ ("About", on_About_Press ),
                     ("Bomb1", on_Bomb1),
                     ("Bomb3", on_Bomb3),
                     ("Bomb5", on_Bomb5),
                     ("SetTimer", on_Timer_Set)
                    ]
            
    applet.setup_menu(ppmenu_xml, ppmenu_verbs, None)
    
    applet.add(image)
    applet.show_all()
    return True

def run_in_panel():
    gnomeapplet.bonobo_factory("OAFIID:GNOME_BombMakerApplet_Factory", gnomeapplet.Applet.__gtype__, "hello", "1.0", sample_factory)

def run_in_window():
    main_window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    main_window.set_title("Bomb Maker Applet")
    main_window.connect("destroy", gtk.main_quit)
    app = gnomeapplet.Applet()
    sample_factory(app, None)
    app.reparent(main_window)
    main_window.show_all()
    gtk.main()
    sys.exit()

def main(args):
    if len(args) == 2 and args[1] == "run-in-window":
        run_in_window()
        
    else:
        run_in_panel()

if __name__ == '__main__':
    main(sys.argv)
    



